{"version":3,"sources":["components/InputCheckLifted.jsx","components/InputCheck.jsx","components/Home.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["InputCheckLifted","props","updateInput","bind","getValue","oldProps","target","this","onUpdate","event","preventDefault","v","parseFloat","value","isNaN","icon","correct","val","faCheckCircle","faTimesCircle","className","type","onChange","e","state","React","Component","InputCheck","NaN","setState","Home","useState","inputNumber","percent","percentState","setPercentState","onePercent","setOnePercent","sectionPercent","Math","floor","console","log","Container","min","parseInt","Array","fill","map","_","idx","style","background","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.abbc9f56.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons';\r\n\r\nclass InputCheckLifted extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.updateInput = this.updateInput.bind(this);\r\n        this.getValue = this.getValue.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n        if (oldProps.target !== this.props.target) {\r\n            this.props.onUpdate(\"\");\r\n        }\r\n    }\r\n\r\n    updateInput(event) {\r\n        event.preventDefault();\r\n        let v = parseFloat(event.target.value);\r\n        if (isNaN(v)) v = \"\";\r\n        this.props.onUpdate(v);\r\n    }\r\n\r\n    render() {\r\n        const correct = this.props.val === this.props.target;\r\n        let icon;\r\n        if (correct) {\r\n            icon = faCheckCircle;\r\n        } else {\r\n            icon = faTimesCircle;\r\n        }\r\n        return (\r\n            <label className={ correct ? \"correct\" : \"incorrect\" }>\r\n                <FontAwesomeIcon icon={icon} />\r\n                <input type=\"number\" value={this.props.val} onChange={(e) => this.updateInput(e)} />\r\n            </label>)\r\n    }\r\n\r\n    getValue() {\r\n        return this.state.val;\r\n    }\r\n}\r\n\r\nexport default InputCheckLifted;","import React from 'react';\r\nimport InputCheckLifted from './InputCheckLifted';\r\n\r\nclass InputCheck extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            val: NaN\r\n        }\r\n\r\n        this.updateInput = this.updateInput.bind(this);\r\n        this.getValue = this.getValue.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n        if (oldProps.target !== this.props.target) {\r\n            this.setState({\r\n                val: NaN\r\n            })\r\n        }\r\n    }\r\n\r\n    updateInput(val) {\r\n        this.setState({\r\n            val: val\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (<InputCheckLifted onUpdate={this.updateInput} val={this.state.val} target={this.props.target} />)\r\n    }\r\n\r\n    getValue() {\r\n        return this.state.val;\r\n    }\r\n}\r\n\r\nexport default InputCheck;","import React, { useState } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport InputCheckLifted from './InputCheckLifted';\r\nimport InputCheck from './InputCheck';\r\n\r\n\r\nconst Home = () => {\r\n    const [ percentState, setPercentState ] = useState({\r\n        inputNumber: 100,\r\n        percent: 50\r\n    });\r\n    \r\n    const [ onePercent, setOnePercent ] = useState(\"\");\r\n\r\n    const updateInput = (event) => {\r\n        event.preventDefault();\r\n        let v = Math.min(parseInt(event.target.value), 1000);\r\n        if (isNaN(v)) v = \"\";\r\n        setPercentState({\r\n            inputNumber: v,\r\n            percent: percentState.percent\r\n        });\r\n    };\r\n\r\n    const updatePercent = (event) => {\r\n        event.preventDefault();\r\n        let v = Math.min(parseInt(event.target.value), 100);\r\n        if (isNaN(v)) v = \"\";\r\n        setPercentState({\r\n            inputNumber: percentState.inputNumber,\r\n            percent: v\r\n        });\r\n    };\r\n\r\n    var sectionPercent = 100 - (percentState.inputNumber * percentState.percent * 0.01 - Math.floor(percentState.inputNumber * percentState.percent * 0.01)) * 100;\r\n    console.log(sectionPercent);\r\n\r\n    return (\r\n        <Container className=\"Home\">\r\n            <h1>Percent Manipulative</h1>\r\n            <div className=\"input\">\r\n                <h3>Input Number: <input type=\"number\" value={percentState.inputNumber} onChange={updateInput} /></h3>\r\n                <h3>Input Percent: <input type=\"number\" value={percentState.percent} onChange={updatePercent} />%</h3>\r\n            </div>\r\n            <div className=\"manipulative\">\r\n                <div className=\"grid\">\r\n                    { (new Array(percentState.inputNumber)).fill(0).map((_, idx) => (\r\n                        <div key={idx} className={\r\n                            idx < Math.floor(percentState.percent * percentState.inputNumber * 0.01) ? \"filled\" : \"\"}\r\n                            style={ idx >= Math.floor(percentState.percent * percentState.inputNumber * 0.01) && idx < percentState.percent * percentState.inputNumber * 0.01 && sectionPercent > 0 ? {\r\n                                background: 'linear-gradient(to bottom, rgba(30, 87, 153, 0) 0%, rgba(41, 137, 216, 0) ' + sectionPercent + '%, pink ' + (sectionPercent + 1) + '%, pink 100%)'\r\n                            } : {}}></div>\r\n                    )) }\r\n                </div>\r\n                <div className=\"explanation\">\r\n                    <h3>1% of {percentState.inputNumber} = <InputCheckLifted val={onePercent} onUpdate={setOnePercent} target={percentState.inputNumber * 0.01} /></h3>\r\n                    <h3>{percentState.percent}% of {percentState.inputNumber} = </h3>\r\n                    <h3>{onePercent} &#215; {percentState.percent} = <InputCheck target={ percentState.inputNumber * percentState.percent * 0.01 } />%</h3>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}